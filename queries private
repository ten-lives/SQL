--beginning of query

SELECT COUNT(*) FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

SELECT COUNT (*) FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID'
AND JanSales.Product = 'iPhone'
;

SELECT customers.acctnum 
FROM BIT_DB.FebSales FebSales
LEFT JOIN BIT_DB.customers customers
ON Febsales.orderID = customers.acctnum
WHERE length(orderid) = 6
AND orderid <> ''
AND orderid <> 'Order ID'
AND order_id IS NOT NULL
;


SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

SELECT distinct price, Product
FROM BIT_DB.JanSales
ORDER BY price asc
LIMIT 1
;

SELECT SUM(quantity)*price as Revenue, product
FROM BIT_DB.JanSales
GROUP BY product,price
;

SELECT SUM (quantity), product, sum (quantity)*price as revenue, location
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product
;

SELECT 
count(distinct cust.acctnum), 
avg(Feb.quantity*Feb.price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID'
;

--end of first set of query

SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00'
;

SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35'
;

SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%'
;

SELECT orderdate from BIT_DB.FebSales
;

SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%'
;

SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99'
;

SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales Feb
WHERE location like '%Los Angeles%'
GROUP BY product
;

SELECT location, count(orderID)
FROM BIT_DB.JanSales Jan
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID' 
GROUP BY location
HAVING count(orderID) > 2
;

SELECT Product, SUM(quantity) Quantity
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product
;

SELECT sum(quantity*price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

SELECT sum(quantity)/count(cust.acctnum) AVGQuantity
FROM BIT_DB.FebSales FEB
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid = cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

SELECT Product, sum(quantity*price) as Revenue
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY Product
ORDER BY Revenue desc
LIMIT 1
;



-- BELOW IS SPOTIFY DATA QUERY

--TESTING DATA QUERY, DATA INTEGRITY 100%
SELECT * FROM BIT_DB.Spotifydata
ORDER BY liveness desc
;

--Determining the average of the top 50 songs in popularity, daceability, liveness
SELECT avg(popularity), avg(danceability), avg(liveness)
FROM BIT_DB.Spotifydata
;

--Filtering for tracks with a popularity greater than 86 which is the avg of the top 50
SELECT id, artist_name, liveness, popularity
FROM BIT_DB.Spotifydata
WHERE popularity >86
ORDER BY popularity desc
;

--not working
--Average liveness of the top 10 tracks in popularity
SELECT avg(liveness) AS avg_liveness
FROM BIT_DB.Spotifydata
WHERE popularity > 86
ORDER BY popularity desc
LIMIT 10
;

--not working
--Average liveness of the top 11-20 tracks in popularity
SELECT avg(liveness) AS avg_liveness
FROM BIT_DB.Spotifydata
WHERE popularity > 86
ORDER BY popularity desc
LIMIT 10 OFFSET 10;
;


WITH tempTable AS (
    SELECT s.artist_name, 
    AVG(s.popularity) AS average_popularity
    FROM Spotifydata s
    GROUP BY s.artist_name
    )

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM tempTable
WHERE average_popularity >= 90
ORDER BY average_popularity DESC
;

--Creating new table for CityBikeLanes
CREATE TABLE BIT_DB.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null)

--do not use above anymore

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

-- QUERY #1 
-- Get an overview of the data. Instead of looking at the entire table, 10 rows will do. 
SELECT * FROM CityBikeLanes LIMIT 10;

SELECT * FROM CityBikeLanes WHERE street='Walnut';

-- Start of Query
WITH safety_average_cte AS(
    SELECT cbl.street, avg(cbl.safetyrating) as 'rating'
    FROM CityBikeLanes cbl
    GROUP BY cbl.street
)

SELECT street, rating, 'safe lane' as 'label' 
FROM safety_average_cte
WHERE rating >=4
